#!/usr/bin/python
#
# vim: filetype=python
# ===========================================================================
# Tool "imagecompare": compare images to find out similar images.
# ---------------------------------------------------------------------------
# Working principle:
#   Compare b/w thumbs of the images, where the thumbs of all images have a
#   fixesd size.
#
# Copyright: Oliver Bandel
# Copyleft:  GNU GPL v3 or higher/later version
#
# Use this software at your own risk.
# ===========================================================================

r"""
    This tool aims to find out similar or equal image-files.
    The basic idea has two parts:
        1) reducing the data of the comparison while being accurate enough
           to ensure a working comparison
        2) comparing the files via the reduced data

    Solution to 1): comparing black-/white-thumbnails of the images,
    scaled down to a fixed rectangle shape.

    Solution to 2): calculate the pixel-difference of the images, and take the
    average of the absolute value of that difference, and compare that value
    with a threshold.
    $ coeff = \frac{1}{n}\sum_{i=1}^n | x_i - y_i | $
    Thresholds:    1.5 for very similar / nearly equal images
                  10.0 for similar files


    By default, names of similar images will be printed into a file that can be
    called as shell-script, which then calls the image-viewer 'qiv' in
    fullscreen-mode.
    The reason is, that a human then can select (delete) files at will.
    (Reason for that design decision are mentioned below.)

    If option --bare is used, only the bare results of the simlarity-search
    will be output to that file.
    This means: no image-viewer invocation and also no additional
    information.
    This option might make sense, if post processing is done by other programs.

    Format of the result output:
    All files that are found to be similar are printed in one row (line).

    So, for each chain of similar files, the image viewer will be
    invoked once, if ```--bare``` is not used.

    By default, there will be additional information in the file, like for
    example the number of files and the needed time for certain operations.

    Then deleting those files that can/should be deleted is done 'by hand',
    which means: the decision is not taken over by the software.
    The reason is: the interest which image to delete (or not delete any at all)
    can be different and depending on user and situation.
    For example:
      - don't delete any of the similar files (e.g. just view the images)
      - delete the thumbs and store the original images
      - delete the bigger images and save the (big enough) smaller one / thumbs
      - delete the similar image without some overlayed text (text annyoing)
      - delete the similar image with some overlayed text (text informative)
      - (...)
    So the decision is up to the user.

    The image viewer qiv does not remove the files immediately.
    The will be moved to the directory ./.qiv-trash and can be recovered
    this way.
"""

import sys
import os.path as path
import argparse

from time import perf_counter as pc

from PIL import Image
import numpy as np

from dis import dis


# Settings, hardcoded (possible candidates for settings via cli parameters)
# -------------------------------------------------------------------------
OUTFILENAME = "view-results.bash" # hardcode value: filename
THUMBMATCH_EPSILON = 1.5 # hardcoded value: THUMBMATCH_EPSILON (max. dist. for similarity)


#############
# FUNCTIONS #
#############

def fixedshapebwthumb(filename):
    """
    Create one-dimensional array of the b/w image data of image-file.

    Fixed shape is 100x100.
    """
    img = Image.open(filename)

    imgsize = img.width * img.height

    thumb = img.resize([100, 100], Image.LANCZOS) # hardcode value: fixed thumb-size
    bwthumb = thumb.convert('L') # convert thumb to black/white

    data = np.array(bwthumb.getdata())

    img.close()

    return data, imgsize


def calc_imagediffcoeff(bwimg_1, bwimg_2):
    r"""Calculate image difference coefficient.

    The arguments bwimg_1 and bwimg_2 are numpy-arrays,
    repesenting the black-white/grayscale-images and must have the
    same dimensions (same shape).
    $ coeff = \frac{1}{n}\sum_{i=1}^n | x_i - y_i | $
    """
    absdiff = abs(bwimg_1 - bwimg_2)
    return sum(absdiff)/len(absdiff)


def print_dot(outfile=sys.stderr):
    """Print a dot without newline and flush the output."""
    print(".", end='', file=outfile, flush=True)

def print_val_if_modulo(value, modulo, prepend, outfile=sys.stderr):
    """Print the value if value modulo 'modulo' and prepend text in 'prepend'."""
    if not value % modulo:
        print("{} {}".format(prepend, value), file=outfile)



#############
# CLASSES   #
#############

class ImageThumb:
    r"""Create an ImageThumb object.

    For each image (given by 'filename') this class creates an object,
    which contains the black/white thumbnail of that image.
    The image data is stored in a numpy-vector (1-dim array) of length
    n := thumbwidth * thumbheight.
    Also a distance method is available, which calculates the distance
    between two such thumbs.
    The used distance function is
      $ \frac{1}{n}\sum_{i=1}^n | x_i - y_i | $.
    """

    def __init__(self, filename):
        """Initialize ImageThumb object."""
        self.filename = filename
        self.bwthumb, self.size = fixedshapebwthumb(filename)

    def __repr__(self):
        return """ImageThumb("{}")""".format(self.filename)

    def __sub__(self, other):
        return self.bwthumb - other.bwthumb

    def __len__(self):
        return len(self.bwthumb)

    def __lt__(self, other):
        """Compare thumbnails by size of the original image."""
        if self.size - other.size < 0:
            return True
        elif self.size == other.size:
            return self.filename >= other.filename
        else:
            return False


    @staticmethod
    def dist(this, that):
        r"""
        Metric function to calculate the distance value.

        Parameters:
        this: one ImageThumb object
        that: another ImageThumb object

        Returnvalue: distance value (float)

        Calculation: $ \frac{1}{n}\sum_{i=1}^n | x_i - y_i | $.
        This is sum-metrics divided by n, to get a handy value.
        (Can also be seen as the mean of the abs() of pixelwise differences.)
        As Numpy does elementwise operations, no loop is needed for the
        substraction.

        Parameters: 'this' and 'that' are ImageThumb objects.
        Result:     distance between 'this' and 'that' returned.
        """
        diffval = np.sum(np.abs(this - that)) / len(this)
        return diffval



class DistanceChain:
    """
    Class DistanceChain to collect those thumbs, which have a distance of
    epsilon or less.
    The thumbs not necessarily line up in a chain, rather they do line up
    in a web. But the key point is, that if they would line up in a chain,
    then the max. distance between two of the n thumbs inside the chain
    would not be farther away than n * epsilon.
    This follows from the triangle inequality for n points/objects/thumbs.
    So only thumbs that have a smaller distance than n * epsilon will be checked
    at all on a possible membership.
    Practically this means: for thumbs far away (farther away than n * epsilon)
    no comparison of thumb-distances at all is necessary.
    This saves (number_of_elements_in_the_chain - 1) comparisons per candidate.
    The distance-function is picked from the candidate objects. This provides
    inheritance of the distance-method from the objects in use.
    """

    def __init__(self, epsilon):
        self.representant = None
        self.chainset   = set()
        self.epsilon    = epsilon
        self.similar    = None
        self.distfunc   = None


    def insert(self, candidate):
        """Insert an element into the distance chain, if chain empty or element not too far away."""
        # if chain is empty, insert first candidate as representant
        if len(self.chainset) == 0:
            self.representant = candidate
            self.chainset.add(self.representant)
            self.distfunc = self.representant.dist
            return True

        # if 'candidate' thumb is too far away, don't incorporate it
        if self.distfunc(self.representant, candidate) > self.epsilon * len(self.chainset):
            return False

        # incorporate candidate if it is in the near of one of the chain members
        for ce in self.chainset:
            if self.distfunc(ce, candidate) <= self.epsilon:
                self.chainset.add(candidate)
                return True

        return False # candidate not incorporated


    def card(self):
        """Get cardinality of the distance chain."""
        return len(self.chainset)

    def getrepr(self):
        """Get the representant of the distance chain."""
        return self.representant

    def getchain(self):
        """Get whole chain - returns set of the elements."""
        return self.chainset

    def finish(self):
        """Create the list of files of the chain -> self.similar"""
        # extract filenames with sort-by-size
        self.similar = [ thumb.filename for thumb in sorted(self.chainset, reverse=True) ]



def get_chainsets_from_thumblist(thumblist, epsilon):
    """
    Create a list of chainsets from the list of thumbs.

    Parameters:
    thumblist: list of ImageThumb objects
    epsilon:   max. distance between two objects to be thrown into the same distance chain

    Returnvalue: set of chains

    Either a thumb is incoroprated into an existing chain,
    or a new chain will be created for it.
    """
    chainset = []
    for thumb in thumblist:

        # no chain existing so far?
        # then create one, append it to the list and pick new thumb
        if len(chainset) == 0:
            dc = DistanceChain(epsilon)
            dc.insert(thumb)
            chainset.append(dc)
            continue

        # try to insert thumb into any existing distance chain.
        # if successful, check next thumb.
        # if not, create new chainset for that thumb and append it to the list.
        inserted = False
        for idx, chain in enumerate(chainset):
            inserted = False
            if chain.insert(thumb):
                inserted = True
                break

        # create new distance chain for the thumb and append chain to chainlist
        if not inserted:
            dc = DistanceChain(epsilon)
            dc.insert(thumb)
            chainset.append(dc)
            continue

    return chainset


def from_filelist_create_thumblist(list_of_filenames):
    """
    Select valid imagefiles from the filename-list; return list of thumb-objects.

    For files that can be opened as image-files, create thumbnail-objects and
    return a list of these objects.
    For files that can't be opened as imagefiles, print a warning to sys.stderr.
    """
    thumblist = []
    idx = 0
    for fileidx, fn in enumerate(list_of_filenames):
        print_dot()
        print_val_if_modulo(idx + 1, 100, "Read file number")
        try:
            if path.islink(fn):
                print("\nignoring symbolic link \"{}\" ({}. file from command line)".format(fn, fileidx + 1), file=sys.stderr, flush=True)
                continue

            if path.isdir(fn):
                print("\nignoring dir \"{}\" ({}. file from command line)".format(fn, fileidx + 1), file=sys.stderr, flush=True)
                continue

            thumblist.append(ImageThumb(fn))

            idx = idx + 1 # index of sucessfully openbed image files

        except KeyboardInterrupt:
            print("\nCtrl-C was issued. Exiting.")
            sys.exit(1)

        except:
            print("\nignoring file \"{}\" ({}. file from command line, could not be opened as image.)".format(fn, fileidx + 1), file=sys.stderr, flush=True)

    return thumblist


def print_to_outfile(filehandle, *args):
    """Print all args to outfile, given by filehandle with flush"""
    print(*args, file=filehandle, flush=True)

# =============================================================================
# =============================================================================
# =============================================================================
def main(filelist, outfilename=OUTFILENAME, bare=False, viewerstring="qiv -f -D", epsilon=THUMBMATCH_EPSILON):
    t0 = pc() # starting timer value

    outfile = open(outfilename, "w")

    print_to_outfile(sys.stderr, "# {} filenames given on command line.".format(len(filelist)))

    # Now read the image-files and store the b/w-data of the their thumbnails
    # -----------------------------------------------------------------------
    print_to_outfile(sys.stderr, "# Reading in files.")
    if not bare:
        print_to_outfile(outfile, "# Reading in files.")

    thumblist = from_filelist_create_thumblist(filelist) # reading image files

    t1 = pc() # timer value after reading the files and creating the bw-imagedata of the thumbs


    # comment to user and outfile
    print_to_outfile(sys.stderr, "Please be patient, it may take a while.")
    print_to_outfile(sys.stderr, "\n{} images could be opened and will now be compared.".format(len(thumblist)))
    if not bare:
        print_to_outfile(outfile, "# {} images could be opened and will now be compared.".format(len(thumblist)))

    # Now do the calculations (similarity search)
    # -------------------------------------------
    t2 = pc() # timer
    chainset = get_chainsets_from_thumblist(thumblist, epsilon)
    t3 = pc() # timer

    # print out the resulting chains with more than one element
    for idx, chain in enumerate(chainset):
        if chain.card() > 1:
            chain.finish()
            fn_quoted_spaces = [ filename.replace(" ", "\ ") for filename  in chain.similar ]
            res = ' '.join(fn_quoted_spaces)



            if viewerstring != "":
                res = viewerstring + " " + res

            print(res, file=outfile, flush=True)

    t4 = pc() # timer value after writing the results to the outfile

    if not bare:
        print_to_outfile(outfile, "# Reading images:   {:8.3f}".format(t1 - t0))
        print_to_outfile(outfile, "# Calculating:      {:8.3f}".format(t3 - t2))
        print_to_outfile(outfile, "# Output to file    {:8.3f}".format(t4 - t3))
        print_to_outfile(outfile, "#")
        print_to_outfile(outfile, "# TOTAL TIME        {:8.3f}".format(t4 - t0))

    print_to_outfile(sys.stderr, "Result has been written to \"{}\"".format(outfilename))

    outfile.close()



if __name__ == '__main__':

    # initiate the cli-args parser
    # ----------------------------
    PROGRAMINFO = "This program aims to find out similar or equal image-files."
    parser = argparse.ArgumentParser(description = PROGRAMINFO)

    parser.add_argument("--bare", "-b", action="store_true", help="print similar filenames only (no viewer, no additional infos) -> stdout")
    parser.add_argument("--treshold", "-t", type=float, default=THUMBMATCH_EPSILON, help="threshold (float) for similarity: 1.5 (default) very similar, 10 roughly similar")
    parser.add_argument('filenames', metavar='imagefile', type=str, nargs='+', help='Image filenames')

    args = parser.parse_args()

    # check if filenames were given at all. Ifnot: message and exit
    if len(args.filenames) < 1:
        print("filenames as arguments needed!")
        sys.exit(1)

    if args.bare:
        viewerstring = ""
    else:
        viewerstring = "qiv -f -D"

    # do the work
    main(args.filenames, bare=args.bare, viewerstring=viewerstring, epsilon=abs(args.treshold))


